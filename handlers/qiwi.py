from misc import bot, dp, conn, cursor
from .functions import *
import requests
from multiprocessing import Process, Queue
from aiogram import executor, types
from aiogram.utils.helper import Helper, HelperMode, ListItem
import os
import json
from config import * #–∏–º–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∏–≤–∏
import random
import time
from time import gmtime
from time import strftime
import handlers.keyboard as kb
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

@dp.callback_query_handler(lambda c: c.data == "p10")
async def popol(callback_query: types.CallbackQuery):
    amount = 10
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay10')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay10")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 10
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
######### 30           
@dp.callback_query_handler(lambda c: c.data == "p30")
async def popol(callback_query: types.CallbackQuery):
    amount = 30
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay30')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay30")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 30
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
########50            
@dp.callback_query_handler(lambda c: c.data == "p50")
async def popol(callback_query: types.CallbackQuery):
    amount = 50
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay50')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay50")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 50
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
#######60            
@dp.callback_query_handler(lambda c: c.data == "p60")
async def popol(callback_query: types.CallbackQuery):
    amount = 60
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay60')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay60")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 60
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
########100            
@dp.callback_query_handler(lambda c: c.data == "p100")
async def popol(callback_query: types.CallbackQuery):
    amount = 100
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay100')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)

@dp.callback_query_handler(lambda c: c.data == "checkpay100")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 100
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
########150            
@dp.callback_query_handler(lambda c: c.data == "p150")
async def popol(callback_query: types.CallbackQuery):
    amount = 150
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay150')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay150")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 150
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
##########200            
@dp.callback_query_handler(lambda c: c.data == "p200")
async def popol(callback_query: types.CallbackQuery):
    amount = 200
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay200')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay200")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 200
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
########300            
@dp.callback_query_handler(lambda c: c.data == "p300")
async def popol(callback_query: types.CallbackQuery):
    amount = 300
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay300')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay300")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 300
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
#######500            
@dp.callback_query_handler(lambda c: c.data == "p500")
async def popol(callback_query: types.CallbackQuery):
    amount = 500
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay500')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay500")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 500
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break 
  ######700         
@dp.callback_query_handler(lambda c: c.data == "p700")
async def popol(callback_query: types.CallbackQuery):
    amount = 700
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay700')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay700")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 700
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
#1000            
@dp.callback_query_handler(lambda c: c.data == "p1000")
async def popol(callback_query: types.CallbackQuery):
    amount = 1000
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay1000')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay1000")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 1000
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break
#2000
@dp.callback_query_handler(lambda c: c.data == "p2000")
async def popol(callback_query: types.CallbackQuery):
    amount = 2000
    user = callback_query.from_user
    comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
    s = requests.Session()
    s.headers['authorization'] = 'Bearer' + token
    parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
    h = s.get('https://oplata.qiwi.com/create', params = parameters)
    inlinepay_keyboard = types.InlineKeyboardMarkup()
    pay_sub = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(qiwi)', url=h.url)
    check_pay = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É QIWIüòé',callback_data='checkpay2000')
    inlinepay_keyboard = inlinepay_keyboard.add(pay_sub).add(check_pay)
    await bot.send_message(user.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=inlinepay_keyboard)
    new_payment(user.id,comment,amount)


@dp.callback_query_handler(lambda c: c.data == "checkpay2000")
async def popol(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    amount = 2000
    comment = get_comment(user.id)
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' +  token
    parameters = {'rows': '50', 'operation':'IN'}
    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ phone +'/payments', params = parameters)
    result = json.loads(h.text)
    for i in range(len(result['data'])):
        if result['data'][i]['comment'] == str(comment):
            if result['data'][i]['sum']['amount'] >= amount:
                user = callback_query.from_user
                bal = cursor.execute("SELECT balance FROM users WHERE id=?", (user.id,)).fetchall()
                dbal = f"{int(bal[0][0])}"
                snyato = int(dbal)+ int(amount)
                cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (snyato, user.id,))
                await bot.send_message(user.id,f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ')
                break
        else:
            await bot.send_message(user.id, '–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É')
            break